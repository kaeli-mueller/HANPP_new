```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Building the database {#database}

For my project I made an SQL database in R through the R package `DBI`. 

```{r packages}
library(DBI)
```

I wanted to make this project relevant to the research that I will be doing for my thesis. However, my project is still very much in the beginning stages and I don't have all the data gathered for it yet. So what I did was make a database with 3 tables structured the way that I thought would be useful. I will eventually be making some bar graphs from the HANPP_master spreadsheet, and later on I want to do an analysis with variables in each county. That is why I chose State_county to be the primary key.

```{r image, echo = FALSE, fig.align = "center", fig.cap = "Schema for my database"}
knitr::include_graphics("Screenshot_database_schema.jpg")
```

First I created an R project to establish a working directory. Then within that I created a database.

```{r database, eval = FALSE, echo = TRUE}
hanpp_db_2 <- dbConnect(drv = RSQLite::SQLite(), "/data/HANPP.db")
```

Next, I added tables to the database. This requires using SQL syntax and listing the name of each column and the type of variable it will be. 

```{r tables, create database, eval = FALSE, echo = TRUE}
#create main HANPP table
dbExecute(hanpp_db_2, "CREATE TABLE HANPP_main (
state_county varchar(30),
total_HANPP integer(10),
HANPP_used integer(10),
HANPP_unused integer(10),
HANPP_aboveground integer(10),
HANPP_belowground integer(10),
HANPP_total_grazing integer(10),
HANPP_total_timber integer(10),
HANPP_total_crops integer(10),
PRIMARY KEY (state_county)
);")

#create table for the county scale
dbExecute(hanpp_db_2, "CREATE TABLE NPPeco_biodiversity_county (
county_id integer PRIMARY KEY, 
state_county varchar(30),
NPPeco integer(10),
species_richness varchar(10),
abundance varchar(10),
FOREIGN KEY (state_county) REFERENCES HANPP_master(state_county)
);")

#create table for the pixel scale
dbExecute(hanpp_db_2, "CREATE TABLE NPPeco_biodiversity_pixel (
county_id integer PRIMARY KEY, 
state_county varchar(30),
NPPeco integer(10),
species_richness varchar(10),
abundance varchar(10),
FOREIGN KEY (state_county) REFERENCES HANPP_master(state_county)
);")
```

Examine tables to see if the connection worked. 
```{r examine, eval = FALSE, echo = TRUE}
dbListTables(hanpp_db_2)
#"HANPP_main"  "NPPeco_biodiversity_county"   "NPPeco_biodiversity_pixel"

class(hanpp_db_2)
#[1] "SQLiteConnection"
#attr(,"package")
#[1] "RSQLite"

#It did work, but they are currently empty because I haven't added any of the csv data yet.
```

# Data Manipulation {#Data}

In this section I will be going through the steps to change the form of the data so that it is compatible with the ggplot syntax to make bar charts. I will be using tidyverse functions, as well as a specific function from the `janitor` library.

```{r maspackages, message = FALSE, warning = FALSE}
library(tidyverse)
library(janitor)
```

I read in the raw data, which is in a large spreadsheet. This spreadsheet is incomplete, it doesn't currently contain all the needed data for the grazing sections. But we will make the plots look how they should and the code will work for the data when I do get it. I skip the very first line because it contains titles in merged cells. The `janitor_names` function is a really easy way to make names with spaces in them into one character string so R can understand it. With this spreadsheet, it's also important to make sure we select the right columns. There's no shortcut around this, we just have to count the number of columns to make sure we are selecting the correct information.
```{r rawdatatwo, warning = FALSE}
hanpp <- read_csv("C:/Users/Kaeli/Documents/HANPP/hanpp_bar_graphs/HANPP_main_updated_2012.csv", skip = 1) %>% 
  janitor::clean_names() %>% 
  dplyr::select(county:year, 
                corn_grain_1:total_grazing_1,
                total_hanpp = x45,
                total_used = x164,
                total_unused = x184,
                total_below_ground = x224,
                total_above_ground = x204)
```

I will examine the top row of the table to make sure it is the correct format
```{r}
head(hanpp)
```

Now that we have the correct information, we have to imagine how it should look in the end to be plotted with ggplot. The aesthetics of our desired final plot are grams C / m2 / year (y), HANPP categories (x), and HANPP variable (sections within the bars). This means that grams of C per m2 per year needs to be a column, and the end result will be a dataframe that looks like this: 

```{r}
data.frame(county = NA,
           state = NA, 
           state_county = NA, 
           year = NA, 
           variable = NA,
           value = NA)
```


So I know I have to pivot my data to make it longer instead of wider. I can do this with tidyverse functions. I am taking the data that used to be in columns and creating more columns.
```{r tidyversetwo}
hanpp_long <- hanpp %>% 
  pivot_longer(cols = corn_grain_1:total_above_ground,
               names_to = "variable",
               values_to = "gc_m2_yr")

head(hanpp_long)
```

Next we have to categorize each variable by which column we want the information to go into. We use the `grepl` function to sort variables based on what character strings they have in their names, and assign them to variables in a new column. 
```{r tidyversethree}
hanpp_long <- hanpp_long %>% 
  mutate(variable = case_when(
    variable == "total_crops_1" ~ "total_crops",
    variable == "total_timber_1" ~ "total_timber",
    variable == "total_grazing_1" ~ "total_grazing",
    TRUE ~ variable
  )) %>% 
  mutate(category = case_when(
    grepl(pattern = "_1", x = variable) ~ "By specific product",
    variable %in% c("total_crops", "total_timber", "total_grazing") ~ "By product",
    variable == "total_hanpp" ~ "HANPP",
    grepl(pattern = "above_ground", variable) ~ "By location",
    grepl(pattern = "below_ground", variable) ~ "By location",
    grepl(pattern = "used", variable) ~ "By use",
    grepl(pattern = "unused", variable) ~ "By use"
  ))

head(hanpp_long)
```

We have one last data manipulation step, we have to order the columns. We do this by assigning factor levels to the different categories for each column.
```{r}
hanpp_long <- hanpp_long %>% 
  mutate(category = factor(category,
                           levels = c("HANPP",
                                      "By use",
                                      "By location",
                                      "By product",
                                      "By specific product")))
```

After doing all the data manipulation, I can now change the names of variables to more visually pleasing names. This will make it easier to read them when they appear on the final bar chart. 

```{r tidyversefour}
hanpp_long <- hanpp_long %>% 
  mutate(variable = case_when(
    variable == "corn_grain_1" ~ "Corn Grain",
    variable == "corn_silage_1" ~ "Corn Silage",
    variable == "winter_wheat_1" ~ "Winter Wheat",
    variable == "spring_wheat_durum_1" ~ "Spring Wheat Durum",
    variable == "spring_wheat_excluding_durum_1" ~ "Spring Wheat Excluding Durum",
    variable == "soybeans_1" ~ "Soybeans",
    variable == "hay_alfalfa_1" ~ "Hay Alfalfa",
    variable == "cotton_pima_1" ~ "Cotton Pima",
    variable == "total_crops_1" ~ "Total Crops",
    variable == "hardwood_1" ~ "Hardwood",
    variable == "softwood_11" ~ "Softwood",
    variable == "private_grazing_land_1" ~ "Private Grazing",
    variable == "total_timber_1" ~ "Total Timber",
    variable == "blm_grazing_1" ~ "BLM Grazing",
    variable == "usfs_grazing_1" ~ "USFS Grazing",
    variable == "total_grazing_1" ~ "Total Grazing",
    variable == "softwood_1" ~ "Softwood",
    variable == "sorghum_1" ~ "Sorghum",
    variable == "other_crops_1" ~ "Other Crops",
    variable == "total_hanpp" ~ "  ",
    variable == "total_used" ~ "Used",
    variable == "total_hanpp" ~ "Unused",
    variable == "total_below_ground" ~ "Below Ground",
    variable == "total_above_ground" ~ "Above Ground",
    variable == "total_crops" ~ "Total Crops",
    variable == "total_grazing" ~ "Total Grazing",
    variable == "total_timber" ~ "Total Timber",
    TRUE ~ variable
  ))

head(hanpp_long)
```

# Data Visualization {#more}

Now that the data is in the correct format, I will use ggplot functions to plot it. First we will write code that works when we want to select a single county to plot. I used `geom_text` to show the names of the sections on the bars, although they are hard to read depending on the sections of each county. We can make different bar charts to compare urban vs. rural areas. 

```{r plotthree, warning = FALSE}
ggplot(hanpp_long[which(hanpp_long$state_county == "COLORADO_DENVER"), ], 
       aes(x = category, y = gc_m2_yr, fill = variable)) +
  geom_bar(position = "stack", stat = "identity") +
  geom_text(aes(label = variable), position = "stack", vjust = 1.5) +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(x = " ", y = "HANPP (gC/m2/year)") +
  ggtitle("HANPP Harvest in Denver County, Colorado (urban)")
```


```{r plotrural, warning = FALSE}
ggplot(hanpp_long[which(hanpp_long$state_county == "COLORADO_PROWERS"), ], 
       aes(x = category, y = gc_m2_yr, fill = variable)) +
  geom_bar(position = "stack", stat = "identity") +
  geom_text(aes(label = variable), position = "stack", vjust = 1.5) +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(x = " ", y = "HANPP (gC/m2/year)") +
  ggtitle("HANPP Harvest Prowers County, Colorado (rural)")
```

we can also see the difference between a county with really high HANPP harvest. An example of this is a county like Lyon County Iowa, which is in the "corn belt" of the U.S. The gC/m2/year is much higher here than the previous counties from Colorado, even the rural one.

```{r plotlyon, warning = FALSE}
ggplot(hanpp_long[which(hanpp_long$state_county == "IOWA_LYON"), ], 
       aes(x = category, y = gc_m2_yr, fill = variable)) +
  geom_bar(position = "stack", stat = "identity") +
  geom_text(aes(label = variable), position = "stack", vjust = 1.5) +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(x = " ", y = "HANPP (gC/m2/year)") +
  ggtitle("HANPP Harvest Lyon County, Iowa (high in corn products)")
```

The bar charts also look different for counties in the Southeast, such as in Georgia. HANPP harvest is still very high, but her there is much more cotton and softwood timber being harvested. 

```{r plotgeorgia, warning = FALSE}
ggplot(hanpp_long[which(hanpp_long$state_county == "GEORGIA_TOOMBS"), ], 
       aes(x = category, y = gc_m2_yr, fill = variable)) +
  geom_bar(position = "stack", stat = "identity") +
  geom_text(aes(label = variable), position = "stack", vjust = 1.5) +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(x = " ", y = "HANPP (gC/m2/year)") +
  ggtitle("HANPP Harvest Toombs County, Georgia (high in timber and cotton products)")
```

We can also change this code to make it a loop. This would automate the process of making bar charts for all of the data, and save these plots in a designated folder. This is done by making a vector with a length of all the state_names, and using this to run through every county in our dataframe.  
```{r plotsthree, eval=FALSE}
for (i in 1:5) {
  
  county <- unique(hanpp_long$state_county)[i]
  
  ggplot(hanpp_long[which(hanpp_long$state_county == county), ], 
         aes(x = category, y = gc_m2_yr, fill = variable)) +
    geom_bar(position = "stack", stat = "identity", color = "black") +
    geom_text(aes(label = variable), position = "stack", vjust = 1.5) +
    theme_minimal() +
    theme(legend.position = "none") +
    labs(x = " ", y = "HANPP (gC/m2/year)") +
    ggtitle(paste0("HANPP Harvest in_", county))
  
  ggsave(filename = paste0("C:/Users/Kaeli/Documents/HANPP/hanpp_bar_graphs/new_bar_chart_", county, ".tiff"),
         height = 10, width = 10, compression = "lzw", dpi = 300)
  
}
```
